import numpy as np
from research_edm.evaluation.classification_metrics import get_confusion_matrix

classes = ['4', '5', '6', '7', '8', '9', '10']


def test():
    r"""
                \   Predicted class
    Actual class|  P     N
    P           | TP	FN
    N           | FP	TN

    sklearn documentation cited:
        Thus in binary classification, the count of true negatives is
        :math:`C_{0,0}`, false negatives is :math:`C_{1,0}`, true positives is
        :math:`C_{1,1}` and false positives is :math:`C_{0,1}`.

    confusion_matrix (DEFAULT from sci-kit learn):
                    9 8 7 6 5 4 3 2 1
                    predicted
    9|-------------------------------|
    8|  TN  /  /  /  /    /   /   /  |
    7|       *  /  /   /   FP  /  /  |
    6|           *   /   /   /   /   |
    5|               * /   /  /   /  |   actual
    4|                   *   /  /  / |
    3|       FN              *   /   |
    2|                           TP  |
    1|-------------------------------|

    cm' = np.flip(confusion_matrix):
    1|-------------------------------|
    2|  TP                           |
    3| /  /  *             FN        |
    4|  /   /  / *                   |
    5|   /   /   /   *               |  actual
    6|    /   /     /    *           |
    7| /   / FP  /   /   /   *       |
    8|  /   /  /   /  /   /  /  TN   |
    9|-------------------------------|
    predicted
    1 2 3 4 5 6 7 8 9

    np.flip(cm') => axes are swapped now; compatible with report table.

    EXAMPLE:
    Consider a matrix with its superior triangle having values greater than 1, that follow a pattern.

    DEFAULT:
    x =
    1.00000,1.01000,1.02000,1.03000,1.04000,1.05000,1.06000
    0.00000,1.07000,1.08000,1.09000,1.10000,1.11000,1.12000
    0.01000,0.02000,1.13000,1.14000,1.15000,1.16000,1.17000
    0.03000,0.04000,0.05000,1.18000,1.19000,1.20000,1.21000
    0.06000,0.07000,0.08000,0.09000,1.22000,1.23000,1.24000
    0.10000,0.11000,0.12000,0.12000,0.13000,1.25000,1.26000
    0.14000,0.15000,0.16000,0.17000,0.18000,0.19000,1.27000

    np.flip(x) =
    1.27000,0.19000,0.18000,0.17000,0.16000,0.15000,0.14000
    1.26000,1.25000,0.13000,0.12000,0.12000,0.11000,0.10000
    1.24000,1.23000,1.22000,0.09000,0.08000,0.07000,0.06000
    1.21000,1.20000,1.19000,1.18000,0.05000,0.04000,0.03000
    1.17000,1.16000,1.15000,1.14000,1.13000,0.02000,0.01000
    1.12000,1.11000,1.10000,1.09000,1.08000,1.07000,0.00000
    1.06000,1.05000,1.04000,1.03000,1.02000,1.01000,1.00000

    np.transpose(np.flip(x)) =
    1.27000,1.26000,1.24000,1.21000,1.17000,1.12000,1.06000
    0.19000,1.25000,1.23000,1.20000,1.16000,1.11000,1.05000
    0.18000,0.13000,1.22000,1.19000,1.15000,1.10000,1.04000
    0.17000,0.12000,0.09000,1.18000,1.14000,1.09000,1.03000
    0.16000,0.12000,0.08000,0.05000,1.13000,1.08000,1.02000
    0.15000,0.11000,0.07000,0.04000,0.02000,1.07000,1.01000
    0.14000,0.10000,0.06000,0.03000,0.01000,0.00000,1.00000
    """
    gts =   ['6', '7',  '9', '4', '7', '7', '6', '5', '8', '7', '9', '10', '9', '8', '6', '10', '7']
    preds = ['6', '7', '10', '5', '7', '7', '6', '5', '8', '7', '9', '10', '9', '8', '6', '10', '7']

    # Am luat si le-am numarat. Da, este bine.
    #                       \         Actual class top      |
    #                        \   4   5   6   7   8   9  10  |
    #                        4   0   0   0   0   0   0   0  |
    #                        5   1   1   0   0   0   0   0  |
    #                        6   0   0   3   0   0   0   0  |
    # Predicted class left   7   0   0   0   5   0   0   0  |
    #                        8   0   0   0   0   2   0   0  |
    #                        9   0   0   0   0   0   2   0  |
    #                       10   0   0   0   0   0   1   2  |
    #

    #                       \         Actual class top      |
    #                        \  10   9   8   7   6   5   4  |
    #                       10   2   1   0   0   0   0   0  |
    #                        9   0   2   0   0   0   0   0  |
    #                        8   0   0   2   0   0   0   0  |
    # Predicted class left   7   0   0   0   5   0   0   0  |
    #                        6   0   0   0   0   3   0   0  |
    #                        5   0   0   0   0   0   1   1  |
    #                        4   0   0   0   0   0   0   0  |

    conf_matrix_gt = np.asarray(
        [[2, 1, 0, 0, 0, 0, 0],
         [0, 2, 0, 0, 0, 0, 0],
         [0, 0, 2, 0, 0, 0, 0],
         [0, 0, 0, 5, 0, 0, 0],
         [0, 0, 0, 0, 3, 0, 0],
         [0, 0, 0, 0, 0, 1, 1],
         [0, 0, 0, 0, 0, 0, 0]
         ])

    conf_matrix = get_confusion_matrix(gts, preds, classes)

    conf_matrix = np.transpose(conf_matrix)  # our table uses other confusion matrix format

    assert np.allclose(conf_matrix, conf_matrix_gt)
    print("tests passed")


if __name__ == '__main__':
    test()
